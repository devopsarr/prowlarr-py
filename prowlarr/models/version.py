# coding: utf-8

"""
    Prowlarr

    Prowlarr API docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel

class Version(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    major: Optional[int]
    minor: Optional[int]
    build: Optional[int]
    revision: Optional[int]
    major_revision: Optional[int]
    minor_revision: Optional[int]
    __properties = ["major", "minor", "build", "revision", "majorRevision", "minorRevision"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Version:
        """Create an instance of Version from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "major",
                            "minor",
                            "build",
                            "revision",
                            "major_revision",
                            "minor_revision",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Version:
        """Create an instance of Version from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Version.parse_obj(obj)

        _obj = Version.parse_obj({
            "major": obj.get("major"),
            "minor": obj.get("minor"),
            "build": obj.get("build"),
            "revision": obj.get("revision"),
            "major_revision": obj.get("majorRevision"),
            "minor_revision": obj.get("minorRevision")
        })
        return _obj

