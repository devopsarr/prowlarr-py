# coding: utf-8

"""
    Prowlarr

    Prowlarr API docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel
from prowlarr.models.apply_tags import ApplyTags

class IndexerBulkResource(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    ids: Optional[List]
    tags: Optional[List]
    apply_tags: Optional[ApplyTags]
    enable: Optional[bool]
    app_profile_id: Optional[int]
    priority: Optional[int]
    minimum_seeders: Optional[int]
    seed_ratio: Optional[float]
    seed_time: Optional[int]
    pack_seed_time: Optional[int]
    __properties = ["ids", "tags", "applyTags", "enable", "appProfileId", "priority", "minimumSeeders", "seedRatio", "seedTime", "packSeedTime"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IndexerBulkResource:
        """Create an instance of IndexerBulkResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if ids (nullable) is None
        if self.ids is None:
            _dict['ids'] = None

        # set to None if tags (nullable) is None
        if self.tags is None:
            _dict['tags'] = None

        # set to None if enable (nullable) is None
        if self.enable is None:
            _dict['enable'] = None

        # set to None if app_profile_id (nullable) is None
        if self.app_profile_id is None:
            _dict['appProfileId'] = None

        # set to None if priority (nullable) is None
        if self.priority is None:
            _dict['priority'] = None

        # set to None if minimum_seeders (nullable) is None
        if self.minimum_seeders is None:
            _dict['minimumSeeders'] = None

        # set to None if seed_ratio (nullable) is None
        if self.seed_ratio is None:
            _dict['seedRatio'] = None

        # set to None if seed_time (nullable) is None
        if self.seed_time is None:
            _dict['seedTime'] = None

        # set to None if pack_seed_time (nullable) is None
        if self.pack_seed_time is None:
            _dict['packSeedTime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IndexerBulkResource:
        """Create an instance of IndexerBulkResource from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return IndexerBulkResource.parse_obj(obj)

        _obj = IndexerBulkResource.parse_obj({
            "ids": obj.get("ids"),
            "tags": obj.get("tags"),
            "apply_tags": obj.get("applyTags"),
            "enable": obj.get("enable"),
            "app_profile_id": obj.get("appProfileId"),
            "priority": obj.get("priority"),
            "minimum_seeders": obj.get("minimumSeeders"),
            "seed_ratio": obj.get("seedRatio"),
            "seed_time": obj.get("seedTime"),
            "pack_seed_time": obj.get("packSeedTime")
        })
        return _obj

