# coding: utf-8

"""
    Prowlarr

    Prowlarr API docs  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel

class IndexerStatusResource(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: Optional[int]
    indexer_id: Optional[int]
    disabled_till: Optional[datetime]
    most_recent_failure: Optional[datetime]
    initial_failure: Optional[datetime]
    __properties = ["id", "indexerId", "disabledTill", "mostRecentFailure", "initialFailure"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True
        alias_generator = lambda x: x.split("_")[0] + "".join(word.capitalize() for word in x.split("_")[1:])

    def __getitem__(self, item):
        return getattr(self, item)

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IndexerStatusResource:
        """Create an instance of IndexerStatusResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if disabled_till (nullable) is None
        if self.disabled_till is None:
            _dict['disabledTill'] = None

        # set to None if most_recent_failure (nullable) is None
        if self.most_recent_failure is None:
            _dict['mostRecentFailure'] = None

        # set to None if initial_failure (nullable) is None
        if self.initial_failure is None:
            _dict['initialFailure'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IndexerStatusResource:
        """Create an instance of IndexerStatusResource from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return IndexerStatusResource.parse_obj(obj)

        _obj = IndexerStatusResource.parse_obj({
            "id": obj.get("id"),
            "indexer_id": obj.get("indexerId"),
            "disabled_till": obj.get("disabledTill"),
            "most_recent_failure": obj.get("mostRecentFailure"),
            "initial_failure": obj.get("initialFailure")
        })
        return _obj

